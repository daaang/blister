#!/usr/bin/env python3.3
# Copyright (c) 2015 The Regents of the University of Michigan.
# All Rights Reserved. Licensed according to the terms of the Revised
# BSD License. See LICENSE.txt for details.
from os                     import  listdir
from os.path                import  join    as os_path_join, getsize, \
                                    split   as os_path_split, abspath
from re                     import  compile as re_compile
from sys                    import  argv

from blister.write.pdf      import  PrePdf, PrePdfReference,    \
                                    PrePdfStream, PrePdfName,   \
                                    PrePdfObject
from blister.read.tiff      import  Tiff, IFDTag
from blister.read.jpeg2000  import  Jpeg2000
from blister.read.pdf       import  Pdf, PdfContentStream, PdfStream

class DeepBluePdf:
    re_use_file = re_compile(r"^[0p]([0-9]{7})\.(pdf|tif|jp2)$")

    def __init__ (self, path_to_dir):
        path_to_dir     = abspath(path_to_dir)
        useful_files    = { }
        ignore_files    = set()

        for i in listdir(path_to_dir):
            match           = self.re_use_file.match(i)

            if match is None:
                ignore_files.add(i)
                continue

            seq_str, ext    = match.groups()
            seq             = int(seq_str)

            if seq not in useful_files:
                useful_files[seq]   = { }

            assert ext not in useful_files[seq]

            useful_files[seq][ext]  = os_path_join(path_to_dir, i)

        self.pages   = [ ]
        for i in range(1, len(useful_files) + 1):
            files   = useful_files.pop(i)

            pdffile = files["pdf"]
            thefile = open(pdffile, "rb")
            pdf     = Pdf(thefile)
            thefile.close()

            if "jp2" in files:
                imgfile = files["jp2"]
                thefile = open(imgfile, "rb")
                image   = Jpeg2000(thefile)
                thefile.close()

            else:
                imgfile = files["tif"]
                thefile = open(imgfile, "rb")
                image   = Tiff(thefile)
                thefile.close()

            self.pages.append((pdf, image, pdffile, imgfile))

        assert len(useful_files) == 0

        root, self.volume   = os_path_split(path_to_dir)

    def build_pdf (self):
        pdf         = PrePdf()

        procset     = pdf.insert([
            PrePdfName("PDF"),
            PrePdfName("Text"),
            PrePdfName("ImageB"),
            PrePdfName("ImageI"),
            PrePdfName("ImageC")])

        fonts       = {
            "F1": { "Type":     PrePdfName("Font"),
                    "Subtype":  PrePdfName("Type1"),
                    "Name":     PrePdfName("F1"),
                    "BaseFont": PrePdfName("Helvetica"),
                    "Encoding": PrePdfName("WinAnsiEncoding") },
            "F2": { "Type":     PrePdfName("Font"),
                    "Subtype":  PrePdfName("Type1"),
                    "Name":     PrePdfName("F2"),
                    "BaseFont": PrePdfName("Helvetica-Bold"),
                    "Encoding": PrePdfName("WinAnsiEncoding") },
            "F3": { "Type":     PrePdfName("Font"),
                    "Subtype":  PrePdfName("Type1"),
                    "Name":     PrePdfName("F3"),
                    "BaseFont": PrePdfName("Helvetica-Oblique"),
                    "Encoding": PrePdfName("WinAnsiEncoding") },
            "F4": { "Type":     PrePdfName("Font"),
                    "Subtype":  PrePdfName("Type1"),
                    "Name":     PrePdfName("F4"),
                    "BaseFont": PrePdfName("Helvetica-BoldOblique"),
                    "Encoding": PrePdfName("WinAnsiEncoding") },
            "F5": { "Type":     PrePdfName("Font"),
                    "Subtype":  PrePdfName("Type1"),
                    "Name":     PrePdfName("F5"),
                    "BaseFont": PrePdfName("Times-Roman"),
                    "Encoding": PrePdfName("WinAnsiEncoding") },
            "F6": { "Type":     PrePdfName("Font"),
                    "Subtype":  PrePdfName("Type1"),
                    "Name":     PrePdfName("F6"),
                    "BaseFont": PrePdfName("Times-Bold"),
                    "Encoding": PrePdfName("WinAnsiEncoding") },
            "F7": { "Type":     PrePdfName("Font"),
                    "Subtype":  PrePdfName("Type1"),
                    "Name":     PrePdfName("F7"),
                    "BaseFont": PrePdfName("Times-Italic"),
                    "Encoding": PrePdfName("WinAnsiEncoding") },
            "F8": { "Type":     PrePdfName("Font"),
                    "Subtype":  PrePdfName("Type1"),
                    "Name":     PrePdfName("F8"),
                    "BaseFont": PrePdfName("Times-BoldItalic"),
                    "Encoding": PrePdfName("WinAnsiEncoding") },
            "F9": { "Type":     PrePdfName("Font"),
                    "Subtype":  PrePdfName("Type1"),
                    "Name":     PrePdfName("F9"),
                    "BaseFont": PrePdfName("Courier"),
                    "Encoding": PrePdfName("WinAnsiEncoding") },
            "F10": {"Type":     PrePdfName("Font"),
                    "Subtype":  PrePdfName("Type1"),
                    "Name":     PrePdfName("F10"),
                    "BaseFont": PrePdfName("Courier-Bold"),
                    "Encoding": PrePdfName("WinAnsiEncoding") },
            "F11": {"Type":     PrePdfName("Font"),
                    "Subtype":  PrePdfName("Type1"),
                    "Name":     PrePdfName("F11"),
                    "BaseFont": PrePdfName("Courier-Oblique"),
                    "Encoding": PrePdfName("WinAnsiEncoding") },
            "F12": {"Type":     PrePdfName("Font"),
                    "Subtype":  PrePdfName("Type1"),
                    "Name":     PrePdfName("F12"),
                    "BaseFont": PrePdfName("Courier-BoldOblique"),
                    "Encoding": PrePdfName("WinAnsiEncoding") },
        }

        fontref     = { }
        for name, fdict in fonts.items():
            fontref[name] = PrePdfReference(pdf.insert(fdict))

        fontref     = pdf.insert(fontref)

        page_root   = pdf.insert({
            "Type":     PrePdfName("Pages"),
            "Count":    len(self.pages)})

        fake_obj    = PrePdfObject(None)

        pages       = [ ]
        for pagepdf, pageimg, pdffile, imgfile in self.pages:
            proot   = pagepdf.follow(pagepdf.trailer.root)
            ppage   = pagepdf.follow(proot["Pages"])

            while "Kids" in ppage:
                kids    = pagepdf.follow(ppage["Kids"])
                assert len(kids) == 1

                ppage   = pagepdf.follow(kids[0])

            assert ppage["MediaBox"] == ppage["CropBox"]
            pcont   = pagepdf.follow(ppage["Contents"])
            pres    = pagepdf.follow(ppage["Resources"])
            pfont   = pagepdf.follow(pres["Font"])
            pimg    = pagepdf.follow(pres["XObject"])

            while isinstance(pcont, list):
                assert len(pcont) == 1
                pcont   = pagepdf.follow(pcont[0])

            assert isinstance(pcont, PdfStream)

            pfile   = open(pdffile, "rb")
            pcont.decode_stream_data(pagepdf.follow(
                            pcont.value["Length"]), pfile)
            pfile.close()

            pcont   = PdfContentStream(pcont.data)
            imgres  = None

            for key, value in pcont.resources.items():
                if key == "Font":
                    for i in value:
                        assert fonts[i] == pagepdf.follow(pfont[i])

                elif key == "XObject":
                    assert len(value) == 1
                    for i in value:
                        imgres  = str(i)

                else:
                    assert False

            assert imgres is not None

            cont    = PrePdfStream()
            cont.add_zip = True
            cont.set_stream_to_bytes(fake_obj.content_stream(pcont))
            cont    = pdf.insert(cont)

            pimg    = pagepdf.follow(pimg[imgres])

            img     = PrePdfStream({
                "Type":         PrePdfName("XObject"),
                "Subtype":      PrePdfName("Image"),
                "Width":        pagepdf.follow(pimg.value["Width"]),
                "Height":       pagepdf.follow(pimg.value["Height"])})

            if str(pagepdf.follow(pimg.value["Filter"])) \
                    == "CCITTFaxDecode":
                img["Decode"]           = [0, 1]
                img["BitsPerComponent"] = 1
                img["ColorSpace"]       = PrePdfName("DeviceGray")

                #tiff_offsets    = pageimg[0][IFDTag.StripOffsets]
                #tiff_bytecounts = pageimg[0][IFDTag.StripByteCounts]

                #assert len(tiff_offsets) == 1
                #assert len(tiff_bytecounts) == 1

                length  = pagepdf.follow(pimg.value["Length"])

                img.set_stream_to_file(pdffile,
                                       pimg.stream_offset,
                                       length,
                                       [PrePdfName("CCITTFaxDecode")],
                                       [{"K": -1,
                                         "Columns": img["Width"]}])

            else:
                img.set_stream_to_file(imgfile,
                                       0,
                                       getsize(imgfile),
                                       [PrePdfName("JPXDecode")],
                                       [{ }])

            img     = pdf.insert(img)
            pages.append(PrePdfReference(pdf.insert({
                "Type":         PrePdfName("Page"),
                "Parent":       PrePdfReference(page_root),
                "MediaBox":     pagepdf.follow(ppage["MediaBox"]),
                "Contents":     [PrePdfReference(cont)],
                "Resources":    {
                    "ProcSet":      PrePdfReference(procset),
                    "XObject":      {
                        PrePdfName(imgres): PrePdfReference(img)},
                    "Font":         PrePdfReference(fontref)}})))

        pdf[page_root]["Kids"]  = pages
        pdf[pdf.root]["Pages"]  = PrePdfReference(page_root)

        return pdf

    def write (self):
        pdf = self.build_pdf()
        pdf.write(os_path_join("/quod-prep/prep/d/dcu/DCU_Image_Processing/3_In_Process/deep-blue/third-batch/combined/results",
                               self.volume + ".pdf"))

for arg in argv[1:]:
    pdf = DeepBluePdf(arg)
    pdf.write()
